//* ### 1. –í–∏–∫–æ–Ω–∞–π –±–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–¥ –º–∞—Å–∏–≤–æ–º. –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –¥—ñ—ó —Ä–æ–±–∏—Ç–∏ console.log —â–æ–± —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –º–∞—Å–∏–≤.

// - –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ `products1` –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´apple¬ª, ¬´orange¬ª —ñ ¬´melon¬ª. ‚úÖ
// - –î–æ–¥–∞–π—Ç–µ ¬´pear¬ª –¥–æ –∫—ñ–Ω—Ü—è. ‚úÖ
// - –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –¥–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤—É ‚úÖ
// - –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. ‚úÖ
// - –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏. ‚úÖ
// - –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å. ‚úÖ
// - –í–∏–¥–∞–ª—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å. ‚úÖ
// - –í—Å—Ç–∞–≤—Ç–µ ¬´cherry¬ª —Ç–∞ ¬´lemon¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É. ‚úÖ
// - –ó–∞–º—ñ–Ω—ñ—Ç—å ¬´lemon¬ª –Ω–∞ ¬´grapes¬ª ‚úÖ
// - –í–∏–¥–∞–ª—ñ—Ç—å ¬´orange¬ª –∑ –º–∞—Å–∏–≤—É products1 ‚úÖ
// - –û–±'—î–¥–Ω–∞–π—Ç–µ –º–∞—Å–∏–≤ `products1` –∑ –º–∞—Å–∏–≤–æ–º `products2 = ["melon", "watermelon", "pineapple"]`; ‚úÖ
// - –í–∏–¥–∞–ª—ñ—Ç—å –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –º–∞—Å–∏–≤–∞ (`products3`) ‚úÖ
// - –û–±—Ä—ñ–∂ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω–∏–π –º–∞—Å–∏–≤ –±–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ (`products3NoDubs`) –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –¥–æ —Ç—Ä–µ—Ç—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ ‚úÖ
// - –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ `products4 = ["grapes", "pineapple", "cherry"]` —ñ –∑—Ä–æ–±—ñ—Ç—å –π–æ–≥–æ –∫–æ–ø—ñ—é —É –∑–º—ñ–Ω–Ω—É `products4Copy` ‚úÖ
// - –ß–∏ —Ä—ñ–≤–Ω—ñ –º—ñ–∂ —Å–æ–±–æ—é `products4` —ñ `products4Copy`? –ß–æ–º—É? –Ø–∫—â–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç —É products4 —á–∏ –¥–æ–¥–∞—Å—Ç—å—Å—è –≤—ñ–Ω —É products4Copy?

// const products1 = ["apple", "orange", "melon"];

// products1.push("pear");

// console.log("üöÄ ~ products1:", products1);
// console.log("üöÄ ~ products1 length:", products1.length);
// console.log("üöÄ ~ products1 length:", products1[0]);
// console.log("üöÄ ~ products1 length:", products1[products1.length - 1]);

// console.log(products1.shift());
// console.log(products1.pop());

// products1.unshift("cherry", "lemon");

// console.log("üöÄ ~ products1:", products1);

// const lemonInx = products1.indexOf("lemon");
// products1.splice(lemonInx, 1, "grapes");

// console.log("üöÄ ~ products1:", products1);

// const orangeInx = products1.indexOf("orange");

// products1.splice(orangeInx, 1);

// console.log("üöÄ ~ products1:", products1);

// const products2 = ["melon", "watermelon", "pineapple"];

// const products3 = products1.concat(products2);

// console.log("üöÄ ~ products1:", products3);

// const products3NoDubs = [];

// // for (let i = 0; i < products3.length; i += 1) {
// //   if (!(products3.indexOf(products3[i]) === i)) {
// //     const dubInx = products3.indexOf(products3[i]);
// //     products3.splice(dubInx, 1);
// //   }
// // }

// for (let i = 0; i < products3.length; i += 1) {
//   if (products3.indexOf(products3[i]) === i) {
//     products3NoDubs.push(products3[i]);
//   }
// }

// console.log("üöÄ ~ products3NoDubs:", products3NoDubs);

// console.log("üöÄ ~ products3NoDubs:", products3NoDubs.slice(1, 3));

// const products4 = ["grapes", "pineapple", "cherry"];

// const products4Copy = products4;

// console.log(products4Copy === products4);

// console.log("üöÄ ~ products4:", products4);

// products4.push("lemon");

// console.log("üöÄ ~ products4Copy:", products4Copy);

//* ### 2. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `printContactsInfo(names, phones)` —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ `names` —Ç–∞ `phones` –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// function printContactsInfo(names, phones) {
//   const namesArr = names.split(",");
//   const phonesArr = phones.split(",");
//   for (let i = 0; i < namesArr.length; i += 1) {
//     console.log(`${namesArr[i]} - ${phonesArr[i]}`);
//   }
// }

// printContactsInfo(
//   "Jacob,William,Solomon,Artemis",
//   "89001234567,89001112233,890055566377,890055566300"
// );

//* ### 3. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é `findLongestWord(string)`, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–æ–≤—ñ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫ (–≤ —Ä—è–¥–∫—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–ª–æ–≤–∞ —ñ –ø—Ä–æ–±—ñ–ª–∏) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–¥–æ–≤—à–µ —Å–ª–æ–≤–æ –≤ —Ü—å–æ–º—É —Ä—è–¥–∫—É.

// function findLongestWord(string) {
//   const wordsArr = string.split(" ");
//   let longestWord = wordsArr[0];

//   for (const word of wordsArr) {
//     if (longestWord.length < word.length) {
//       longestWord = word;
//     }
//   }

//   return longestWord;
// }

// console.log(findLongestWord("The quick brown fox jumped over the lazy dog")); // 'jumped'
// console.log(findLongestWord("Google do a roll")); // 'Google'
// console.log(findLongestWord("May the force be with you")); // 'force'

//* ### 4. –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –µ–∫–∑–∞–º–µ–Ω —É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤. –ü–µ—Ä—à–∏–π –≤—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —ñ—Å–ø–∏—Ç—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ["a", "a", "b", "d"]. –î—Ä—É–≥–∏–π –º–∞—Å–∏–≤ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "answers" —ñ –º—ñ—Å—Ç–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞. –û–±–∏–¥–≤–∞ –º–∞—Å–∏–≤–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ —ñ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –¥–æ–≤–∂–∏–Ω—É. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –¥–ª—è —Ü—å–æ–≥–æ –º–∞—Å–∏–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –≤–∏–≤–æ–¥—è—á–∏ +4 –∑–∞ –∫–æ–∂–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, -1 –∑–∞ –∫–æ–∂–Ω—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ +0 –∑–∞ –∫–æ–∂–Ω—É –ø—Ä–æ–ø—É—â–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫). –Ø–∫—â–æ –æ—Ü—ñ–Ω–∫–∞ < 0, –≤–∏–≤–µ–¥—ñ—Ç—å 0.

// function checkExam(answers, responses) {
//   let points = 0;

//   for (let i = 0; i < answers.length; i += 1) {
//     if (answers[i] === responses[i]) {
//       points += 4;
//     } else if (responses[i] === "") {
//       points += 0;
//     } else {
//       points -= 1;
//     }
//   }

//   if (points < 0) {
//     points = 0;
//   }

//   return points;
// }

// console.log(checkExam(["a", "a", "b", "b"], ["a", "c", "b", "d"])); // ‚Üí 6
// console.log(checkExam(["a", "a", "c", "b"], ["a", "a", "b", ""])); // ‚Üí 7
// console.log(checkExam(["a", "a", "b", "c"], ["a", "a", "b", "c"])); // ‚Üí 16
// console.log(checkExam(["b", "c", "b", "a"], ["", "a", "a", "c"])); // ‚Üí 0

//* ### 5. –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// function formatString(str) {
//   const strArr = str.trim().split(" ");
//   return strArr.slice(1, strArr.length - 1);
// }

// console.log(formatString("   Welcome to the future   "));
// console.log(formatString("Hello World"));
// console.log(formatString("Knowlage is a power"));

//* ### 6. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –æ—á–∏—â–∞—î –º–∞—Å–∏–≤ –≤—ñ–¥ –Ω–µ–±–∞–∂–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–∞–∫–∏—Ö —è–∫ false undefined, –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏, –Ω—É–ª—å, null.

// function filterArray(arr) {
//   const goodArr = [];
//   for (const item of arr) {
//     if (item) {
//       goodArr.push(item);
//     }
//   }

//   return goodArr;
// }
// console.log(filterArray([0, 1, false, 2, undefined, "", 3, null])); // [1, 2, 3]
// console.log(filterArray([NaN, 0, 15, false, -22, "", undefined, 47, null])); // [15, -22, 47]

//* ### 7. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –±–µ–∑ –Ω–∞–¥–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
// - –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3, 1, 2] –±–µ–∑ 1 => [2, 3, 2]

// function deleteSpecificCharacter(arr, charToDelete) {
//   const newArr = [];
//   for (const item of arr) {
//     if (item !== charToDelete) {
//       newArr.push(item);
//     }
//   }
//   return newArr;
// }

// console.log(deleteSpecificCharacter([1, 2, 3, 1, 2], 1)); // [2, 3, 2]
// console.log(deleteSpecificCharacter([4, 3, 2, 1, 0], 9)); // [4, 3, 2, 1, 0]
// console.log(deleteSpecificCharacter([5, 6, 2, 9, 2])); // [5, 6, 2, 9, 2]
// console.log(deleteSpecificCharacter([5, 6, 2, 9, 2], 2)); // [5, 6, 9]

//* ### 8. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä–Ω–µ —Å—É–º—É —Ä—è–¥–∫–∞

// function digitSum(data) {
//   let sum = 0;
//   const numberArr = String(data).split("");

//   for (const item of numberArr) {
//     sum += Number(item);
//   }

//   return sum;
// }
// console.log(digitSum(4367)); // 20
// console.log(digitSum(56349)); // 27
